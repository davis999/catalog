package io.reactivesw.catalog.domain.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;

/**
 * this is entity class for product.
 * 
 * @author Davis
 *
 */
@Entity
@Table(name = "sw_product")
public class Product implements Serializable {

  /**
   * string for product_id.
   */
  @Transient
  private static final String PRODUCT_ID = "product_id";

  /**
   * serialVersionUID.
   */
  private static final long serialVersionUID = 5773824368423064736L;

  /**
   * id for product. auto generated by database;
   */
  @Id
  @Column(name = PRODUCT_ID)
  @GeneratedValue(strategy = GenerationType.AUTO)
  private long id;

  /**
   * manufacturer for product.
   */
  @Size(max = 64)
  @Column(name = "manufacturer", length = 64)
  private String manufacturer;

  /**
   * brand for product.
   */
  @Size(max = 64)
  @Column(name = "brand", length = 64)
  private String brand;

  /**
   * model for product.
   */
  @Size(max = 128)
  @Column(name = "model", length = 128)
  private String model;

  /**
   * name for product.
   */
  @Size(max = 64)
  @Column(name = "name", length = 64, nullable = false)
  private String name;

  /**
   * display order for product.
   */
  @Column(name = "display_order")
  private int displayOrder;

  /**
   * description for product.
   */
  @Size(max = 1024)
  @Column(name = "description", length = 1024)
  private String description;

  /**
   * detail for product.
   */
  @Column(name = "detail", columnDefinition = "TEXT")
  private String detail;

  /**
   * displayed for product. default is true.
   */
  @Column(name = "displayed")
  private boolean displayed;

  /**
   * deleted for product. default is false.
   */
  @Column(name = "deleted")
  private boolean deleted;

  /**
   * skus for product.
   */
  @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
  private Set<Sku> skus;

  /**
   * variants for product.
   */
  @OneToMany(cascade = CascadeType.REFRESH, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_product_variant", joinColumns = @JoinColumn(name = PRODUCT_ID) ,
      inverseJoinColumns = @JoinColumn(name = "variant_id") )
  private Set<Variant> variants;

  /**
   * features for product.
   */
  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_product_feature", joinColumns = @JoinColumn(name = PRODUCT_ID) ,
      inverseJoinColumns = @JoinColumn(name = "feature_id") )
  private Set<Feature> features;

  /**
   * attribute values for product.
   */
  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_product_attribute_value", joinColumns = @JoinColumn(name = PRODUCT_ID) ,
      inverseJoinColumns = @JoinColumn(name = "attribute_value_id") )
  private Set<AttributeValue> attributeValues;

  /**
   * template for product.
   */
  @ManyToOne(cascade = CascadeType.REFRESH, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_product_template", joinColumns = @JoinColumn(name = PRODUCT_ID) ,
      inverseJoinColumns = @JoinColumn(name = "template_id") )
  private Template template;

  /**
   * category for product.
   */
  @ManyToOne(targetEntity = Category.class)
  @JoinTable(name = "sw_category_product", joinColumns = @JoinColumn(name = PRODUCT_ID) ,
      inverseJoinColumns = @JoinColumn(name = "category_id") )
  private Category category;

  /**
   * default sku.
   */
  @OneToOne
  private Sku defaultSku;

  /**
   * create time for product.
   */
  @Column(name = "create_time")
  private Date createTime;

  /**
   * last modified time for product.
   */
  @Column(name = "last_modified_time")
  private Date lastModifiedTime;

  /**
   * get id.
   * 
   * @return id
   */
  public long getId() {
    return id;
  }

  /**
   * set id.
   * 
   * @param id id.
   */
  public void setId(long id) {
    this.id = id;
  }

  /**
   * get manufacturer.
   * 
   * @return manufacturer
   */
  public String getManufacturer() {
    return manufacturer;
  }

  /**
   * set manufacturer.
   * 
   * @param manufacturer manufacturer
   */
  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }

  /**
   * get brand.
   * 
   * @return brand
   */
  public String getBrand() {
    return brand;
  }

  /**
   * set brand.
   * 
   * @param brand brand
   */
  public void setBrand(String brand) {
    this.brand = brand;
  }

  /**
   * get model.
   * 
   * @return model
   */
  public String getModel() {
    return model;
  }

  /**
   * set model.
   * 
   * @param model model
   */
  public void setModel(String model) {
    this.model = model;
  }

  /**
   * get name.
   * 
   * @return name
   */
  public String getName() {
    return name;
  }

  /**
   * set name.
   * 
   * @param name name
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * get displayOrder.
   * 
   * @return displayOrder
   */
  public int getDisplayOrder() {
    return displayOrder;
  }

  /**
   * set displayOrder.
   * 
   * @param displayOrder displayOrder
   */
  public void setDisplayOrder(int displayOrder) {
    this.displayOrder = displayOrder;
  }

  /**
   * get description.
   * 
   * @return description
   */
  public String getDescription() {
    return description;
  }

  /**
   * set description.
   * 
   * @param description description
   */
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * get detail.
   * 
   * @return detail
   */
  public String getDetail() {
    return detail;
  }

  /**
   * set detail.
   * 
   * @param detail detail
   */
  public void setDetail(String detail) {
    this.detail = detail;
  }

  /**
   * get displayed.
   * 
   * @return displayed
   */
  public boolean isDisplayed() {
    return displayed;
  }

  /**
   * set displayed.
   * 
   * @param displayed displayed
   */
  public void setDisplayed(boolean displayed) {
    this.displayed = displayed;
  }

  /**
   * get deleted.
   * 
   * @return deleted
   */
  public boolean isDeleted() {
    return deleted;
  }

  /**
   * set deleted.
   * 
   * @param deleted deleted
   */
  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
  }

  /**
   * get skus.
   * 
   * @return skus
   */
  public Set<Sku> getSkus() {
    return skus;
  }

  /**
   * set skus.
   * 
   * @param skus skus
   */
  public void setSkus(Set<Sku> skus) {
    this.skus = skus;
  }

  /**
   * get variants.
   * 
   * @return variants
   */
  public Set<Variant> getVariants() {
    return variants;
  }

  /**
   * set variants.
   * 
   * @param variants variants
   */
  public void setVariants(Set<Variant> variants) {
    this.variants = variants;
  }

  /**
   * get features.
   * 
   * @return features
   */
  public Set<Feature> getFeatures() {
    return features;
  }

  /**
   * set features.
   * 
   * @param features features
   */
  public void setFeatures(Set<Feature> features) {
    this.features = features;
  }

  /**
   * get attributeValues.
   * 
   * @return attributeValues
   */
  public Set<AttributeValue> getAttributeValues() {
    return attributeValues;
  }

  /**
   * set attributeValues.
   * 
   * @param attributeValues attributeValues
   */
  public void setAttributeValues(Set<AttributeValue> attributeValues) {
    this.attributeValues = attributeValues;
  }

  /**
   * get template.
   * 
   * @return template
   */
  public Template getTemplate() {
    return template;
  }

  /**
   * set template.
   * 
   * @param template template
   */
  public void setTemplate(Template template) {
    this.template = template;
  }

  /**
   * get createTime.
   * 
   * @return createTime
   */
  public Date getCreateTime() {
    return new Date(createTime.getTime());
  }

  /**
   * set createTime.
   * 
   * @param createTime createTime
   */
  public void setCreateTime(Date createTime) {
    this.createTime = new Date(createTime.getTime());
  }

  /**
   * get lastModifiedTiem.
   * 
   * @return lastModifiedTiem
   */
  public Date getLastModifiedTime() {
    return new Date(lastModifiedTime.getTime());
  }

  /**
   * get category.
   * 
   * @return the category
   */
  public Category getCategory() {
    return category;
  }

  /**
   * set category.
   * 
   * @param category the category to set
   */
  public void setCategory(Category category) {
    this.category = category;
  }

  /**
   * set lastModifiedTime.
   * 
   * @param lastModifiedTime the lastModifiedTime to set
   */
  public void setLastModifiedTime(Date lastModifiedTime) {
    this.lastModifiedTime = new Date(lastModifiedTime.getTime());
  }



  /**
   * get defaultSku.
   * 
   * @return the defaultSku
   */
  public Sku getDefaultSku() {
    return defaultSku;
  }

  /**
   * set defaultSku.
   * 
   * @param defaultSku the defaultSku to set
   */
  public void setDefaultSku(Sku defaultSku) {
    this.defaultSku = defaultSku;
  }

  /**
   * hashCode.
   */
  @Override
  public int hashCode() {
    return Objects.hash(id, brand, deleted, description, detail, displayed, displayOrder,
        manufacturer, model, name);
  }

  /**
   * equals.
   */
  @Override
  public boolean equals(Object obj) {
    boolean equalsResult = false;
    if (this == obj) {
      equalsResult = true;
    } else if (obj instanceof Product) {
      final Product other = (Product) obj;
      equalsResult = Objects.equals(id, other.id) && Objects.equals(brand, other.brand)
          && Objects.equals(deleted, other.deleted)
          && Objects.equals(description, other.description) && Objects.equals(detail, other.detail)
          && Objects.equals(displayed, other.displayed)
          && Objects.equals(displayOrder, displayOrder)
          && Objects.equals(manufacturer, other.manufacturer) && Objects.equals(model, other.model)
          && Objects.equals(name, other.name);
    }
    return equalsResult;
  }


}
