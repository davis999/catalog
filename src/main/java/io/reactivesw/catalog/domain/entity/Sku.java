package io.reactivesw.catalog.domain.entity;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.Objects;
import java.util.Set;

/**
 * this is entity class for sku.
 * 
 * @author Davis
 *
 */
@Entity
@Table(name = "sw_sku")
public class Sku implements Serializable {
  /**
   * serialVersionUID.
   */
  private static final long serialVersionUID = 4440959875887801924L;

  /**
   * id for product. auto generated by database.
   */
  @Id
  @Column(name = "sku_id")
  @GeneratedValue(strategy = GenerationType.AUTO)
  private long id;

  /**
   * skuNumber for sku.
   */
  @Size(max = 64)
  @Column(name = "sku_number", length = 64, nullable = false)
  private String skuNumber;

  /**
   * active for sku.
   */
  @Column(name = "is_active")
  private boolean active;

  /**
   * quantity for sku.
   */
  @Column(name = "quantity")
  private int quantity;

  /**
   * upc for sku.
   */
  @Size(max = 16)
  @Column(name = "upc", length = 16)
  private String upc;

  /**
   * display order for sku.
   */
  @Column(name = "display_order")
  private int displayOrder;

  /**
   * create time for sku.
   */
  @Column(name = "created_time")
  private ZonedDateTime createdTime;

  /**
   * last modified time for sku.
   */
  @Column(name = "modified_time")
  private ZonedDateTime modifiedTime;

  /**
   * price for sku.
   */
  @Column(name = "price", precision = 19, scale = 5)
  private BigDecimal price;

  /**
   * medias for sku.
   */
  @ManyToMany(cascade = CascadeType.REFRESH, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_sku_media", joinColumns = @JoinColumn(name = "sku_id") ,
      inverseJoinColumns = @JoinColumn(name = "media_id") )
  private Set<Media> medias;

  /**
   * variant values for sku.
   */
  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
  @JoinTable(name = "sw_sku_variant_value", joinColumns = @JoinColumn(name = "sku_id") ,
      inverseJoinColumns = @JoinColumn(name = "variant_value_id") )
  private Set<VariantValue> variantValues;

  /**
   * product for sku.
   */
  @ManyToOne(optional = true, targetEntity = Product.class,
      cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
  @JoinColumn(name = "addl_product_id")
  private Product product;

  /**
   * default product.
   * This will be non-null if and only if this Sku is the default Sku for a Product
   */
  @OneToOne(optional = true, targetEntity = Product.class, cascade = {CascadeType.ALL})
  @JoinColumn(name = "default_product_id")
  private Product defaultProduct;

  /**
   * get id.
   * 
   * @return id
   */
  public long getId() {
    return id;
  }

  /**
   * set id.
   * 
   * @param id id
   */
  public void setId(long id) {
    this.id = id;
  }

  /**
   * get skuNumber.
   * 
   * @return skuNumber
   */
  public String getSkuNumber() {
    return skuNumber;
  }

  /**
   * set skuNumber.
   * 
   * @param skuNumber skuNumber
   */
  public void setSkuNumber(String skuNumber) {
    this.skuNumber = skuNumber;
  }

  /**
   * get active.
   * 
   * @return active
   */
  public boolean isActive() {
    return active;
  }

  /**
   * set active.
   * 
   * @param active active
   */
  public void setActive(boolean active) {
    this.active = active;
  }

  /**
   * get quantity.
   * 
   * @return quantity
   */
  public int getQuantity() {
    return quantity;
  }

  /**
   * set quantity.
   * 
   * @param quantity quantity
   */
  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  /**
   * get upc.
   * 
   * @return upc
   */
  public String getUpc() {
    return upc;
  }

  /**
   * set upd.
   * 
   * @param upc upc
   */
  public void setUpc(String upc) {
    this.upc = upc;
  }

  /**
   * get displayOrder.
   * 
   * @return displayOrder
   */
  public int getDisplayOrder() {
    return displayOrder;
  }

  /**
   * set displayOrder.
   * 
   * @param displayOrder displayOrder
   */
  public void setDisplayOrder(int displayOrder) {
    this.displayOrder = displayOrder;
  }

  /**
   * get medias.
   * 
   * @return medias.
   */
  public Set<Media> getMedias() {
    return medias;
  }

  /**
   * set medias.
   * 
   * @param medias medias
   */
  public void setMedias(Set<Media> medias) {
    this.medias = medias;
  }

  /**
   * get variantValues.
   * 
   * @return variantValues
   */
  public Set<VariantValue> getVariantValues() {
    return variantValues;
  }

  /**
   * set variantValues.
   * 
   * @param variantValues variantValues
   */
  public void setVariantValues(Set<VariantValue> variantValues) {
    this.variantValues = variantValues;
  }

  /**
   * get createdTime.
   * 
   * @return createdTime
   */
  public ZonedDateTime getCreatedTime() {
    return createdTime;
  }

  /**
   * set createdTime.
   * 
   * @param createdTime createdTime
   */
  public void setCreatedTime(ZonedDateTime createdTime) {
    this.createdTime = createdTime;
  }

  /**
   * get modifiedTime.
   * 
   * @return modifiedTime
   */
  public ZonedDateTime getModifiedTime() {
    return modifiedTime;
  }

  /**
   * set modifiedTime.
   * 
   * @param modifiedTime modifiedTime
   */
  public void setModifiedTime(ZonedDateTime modifiedTime) {
    this.modifiedTime = modifiedTime;
  }

  /**
   * get product.
   * 
   * @return product
   */
  public Product getProduct() {
    return product;
  }

  /**
   * set product.
   * 
   * @param product product
   */
  public void setProduct(Product product) {
    this.product = product;
  }

  /**
   * get price.
   * 
   * @return price
   */
  public BigDecimal getPrice() {
    return price;
  }

  /**
   * set price.
   * 
   * @param price price
   */
  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  /**
   * get defaultProduct.
   * @return defaultProduct.
   */
  public Product getDefaultProduct() {
    return defaultProduct;
  }

  /**
   * set defaultProduct.
   * @param defaultProduct defaultProduct.
   */
  public void setDefaultProduct(Product defaultProduct) {
    this.defaultProduct = defaultProduct;
  }

  /**
   * hashCode.
   */
  @Override
  public int hashCode() {
    return Objects.hash(id, skuNumber, active, quantity, upc, displayOrder);
  }

  /**
   * equals.
   */
  @Override
  public boolean equals(Object obj) {
    boolean equalsResult = false;
    if (this == obj) {
      equalsResult = true;
    } else if (obj instanceof Sku) {
      final Sku other = (Sku) obj;
      equalsResult = Objects.equals(id, other.id) && Objects.equals(skuNumber, other.skuNumber)
          && Objects.equals(active, other.active) && Objects.equals(quantity, other.quantity)
          && Objects.equals(upc, other.upc) && Objects.equals(displayOrder, other.displayOrder);
    }
    return equalsResult;
  }
}
